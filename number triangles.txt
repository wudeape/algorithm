考虑在下面被显示的数字金字塔。
写一个程序来计算从最高点开始在底部任意处结束的路径经过数字的和的最大。
每一步可以走到左下方的点也可以到达右下方的点。
7

3 8

8 1 0

2 7 4 4

4 5 2 6 5
在上面的样例中,从7 到 3 到 8 到 7 到 5 的路径产生了最大和:30

PROGRAM NAME: numtri

INPUT FORMAT
第一个行包含 R(1<= R<=1000) ,表示行的数目。
后面每行为这个数字金字塔特定行包含的整数。
所有的被供应的整数是非负的且不大于100。

SAMPLE INPUT (file numtri.in) 
5
7
3 8
8 1 0
2 7 4 4
4 5 2 6 5

OUTPUT FORMAT
单独的一行包含那个可能得到的最大的和。

SAMPLE OUTPUT (file numtri.out)
30


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

#define MAXR 1000

int
max(int a, int b)
{
 return a > b ? a : b;
}

void
main(void)
{
 int best[MAXR], oldbest[MAXR];
 int i, j, r, n, m;
 FILE *fin, *fout;

 fin = fopen("numtri.in", "r");
 assert(fin != NULL);
 fout = fopen("numtri.out", "w");
 assert(fout != NULL);

 fscanf(fin, "%d", &r);

 for(i=0; i<MAXR; i++)
  best[i] = 0;

 for(i=1; i<=r; i++) {
  memmove(oldbest, best, sizeof oldbest);
  for(j=0; j<i; j++) {
   fscanf(fin, "%d", &n);
   if(j == 0)
    best[j] = oldbest[j] + n;
   else
    best[j] = max(oldbest[j], oldbest[j-1]) + n;
  }
 }

 m = 0;
 for(i=0; i<r; i++)
  if(best[i] > m)
   m = best[i];

 fprintf(fout, "%d\n", m);
 exit(0);
}






