Runaround Numbers

循环数 

译 by Henry HuGang

循环数是那些不包括0这个数字的没有重复数字的整数 (比如说, 81362) 并且同时具有一个有趣的性质, 就像这个例子: 

如果你从最左边的数字开始 ( 在这个例子中是8) 数最左边这个数字个数字到右边(回到最左边如果数到了最右边),你会停止在另一个新的数字(如果没有停在一个不同的数字上，这个数就不是循环数). 就像: 8 1 3 6 2 从最左边接下去数8个数字: 1 3 6 2 8 1 3 6 所以下一个数字是6. 
重复这样做 (这次从“6”开始数6个数字) 并且你会停止在一个新的数字上: 2 8 1 3 6 2, 也就是2. 
再这样做 (这次数两个): 8 1 
再一次 (这次一个): 3 
又一次: 6 2 8 这是你回到了起点, 在从每一个数字开始数1次之后. 如果你在从每一个数字开始数一次以后没有回到起点, 你的数字不是一个循环数。 
给你一个数字 M (在1到9位之间), 找出第一个比 M大的循环数, 并且一定能用一个无符号长整形数装下。 

PROGRAM NAME: runround 

INPUT FORMAT 

仅仅一行, 包括M 

SAMPLE INPUT (file runround.in) 

81361 

OUTPUT FORMAT 

仅仅一行，包括第一个比M大的循环数。 

SAMPLE OUTPUT (file runround.out) 

81362






#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

int m;
FILE *fout;

/* check if s is a runaround number;  mark where we've been by writing 'X' */
int
isrunaround(char *s)
{
    int oi, i, j, len;
    char t[10];

    strcpy(t, s);
    len = strlen(t);

    i=0;
    while(t[i] != 'X') {
 oi = i;
 i = (i + t[i]-'0') % len;
 t[oi] = 'X';
    }

    /* if the string is all X's and we ended at 0, it's a runaround */
    if(i != 0)
 return 0;

    for(j=0; j<len; j++)
 if(t[j] != 'X')
     return 0;

    return 1;
}

/*
 * create an md-digit number in the string s.
 * the used array keeps track of which digits are already taken.
 * s already has nd digits.
 */
void
permutation(char *s, int *used, int nd, int md)
{
    int i;

    if(nd == md) {
 s[nd] = '\0';
 if(atoi(s) > m && isrunaround(s)) {
     fprintf(fout, "%s\n", s);
     exit(0);
 }
 return;
    }

    for(i=1; i<=9; i++) {
 if(!used[i]) {
     s[nd] = i+'0';
     used[i] = 1;
     permutation(s, used, nd+1, md);
     used[i] = 0;
 }
    }
}

void
main(void)
{
    FILE *fin;
    char s[10];
    int i, used[10];

    fin = fopen("runround.in", "r");
    fout = fopen("runround.out", "w");
    assert(fin != NULL && fout != NULL);

    fscanf(fin, "%d", &m);

    for(i=0; i<10; i++)
 used[i] = 0;

    for(i=1; i<=9; i++)
 permutation(s, used, 0, i);

    assert(0); /* not reached */
}