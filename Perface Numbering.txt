一类书的序言是以罗马数字标页码的。传统罗马数字用单个字母表示特定的数值，一下是标准数字表: 

I 1 L 50 M 1000
V 5 C 100
X 10 D 500

最多3个可以表示为10n的数字(I,X,C,M)可以连续放在一起，表示它们的和: 

III=3 
CCC=300 
可表示为5x10n的字符(V,L,D)从不连续出现。

除了下一个规则，一般来说，字符以递减的顺序接连出现: 

CCLXVIII = 100+100+50+10+5+1+1+1 = 268 
有时，一个可表示为10^n的数出现在一个比它大的数前(I在V或X前面，X在L或C前面，等等)。在这种情况下，数值等于后面的那个数减去前面的那个数: 

IV = 4 
IX = 9 
XL = 40 
像XD, IC, 和XM这样的表达是非法的，因为前面的数比后面的数小太多。对于XD(490的错误表达)，可以写成 CDXC; 对于IC(99的错误表达)，可以写成XCIX; 对于XM(990的错误表达)，可以写成CMXC。 

给定N(1 <= N < 3,500)， 序言的页码数，请统计在第1页到第N也中，有几个I出现，几个V出现，等等 (从小到大的顺序)。不要输出并没有出现过的字符。 

比如N = 5, 那么页码数为: I, II, III, IV, V. 总共有7个I出现，2个V出现。 

PROGRAM NAME: preface

INPUT FORMAT
一个整数N。 

SAMPLE INPUT(preface.in) 
5

OUTPUT FORMAT
每行一个字符和一个数字k，表示这个字符出现了k次。字符必须按数字表中的递增顺序输出。 

SAMPLE OUTPUT(preface.out)
I 7
V 2




#include <fstream.h>

int     Ig = 0;
int     Vg = 0;
int     Xg = 0;
int     Lg = 0;
int     Cg = 0;
int     Dg = 0;
int     Mg = 0;

inline void 
roman (int x)
{
    int     I = 0;
    int     V = 0;
    int     X = 0;
    int     L = 0;
    int     C = 0;
    int     D = 0;
    int     M = 0;
    for ( ; x >= 1000; ++M, x -= 1000);
    for ( ; x >= 500; ++D, x -= 500);
    for ( ; x >= 100; ++C, x -= 100);
    for ( ; x >= 50; ++L, x -= 50);
    for ( ; x >= 10; ++X, x -= 10);
    for ( ; x >= 5; ++V, x -= 5);
    for ( ; x >= 1; ++I, x -= 1);

    while (D > 0 && (C / 4) > 0) {
 --D; C -= 4; ++M; ++C;
    }
    while (C >= 4) {
 C -= 4; ++D; ++C;
    }
    while (L > 0 && (X / 4) > 0) {
 --L; X -= 4; ++C; ++X;
    }
    while (X >= 4) {
 X -= 4; ++L; ++X;
    }
    while (V > 0 && (I / 4) > 0) {
 --V; I -= 4; ++X; ++I;
    }
    while (I >= 4) {
 I -= 4; ++V; ++I;
    }
    Ig += I;
    Vg += V;
    Xg += X;
    Lg += L;
    Cg += C;
    Dg += D;
    Mg += M;
    return;
}

int 
main ()
{

    int     n;
    ifstream filein ("preface.in");
    filein >> n;
    filein.close ();

    for (int loop = 1; loop <= n; ++loop) {
 roman (loop);
    }

    ofstream fileout ("preface.out");
    if (Ig != 0) {
 fileout << 'I' << ' ' << Ig << endl;
    }
    if (Vg != 0) {
 fileout << 'V' << ' ' << Vg << endl;
    }
    if (Xg != 0) {
 fileout << 'X' << ' ' << Xg << endl;
    }
    if (Lg != 0) {
 fileout << 'L' << ' ' << Lg << endl;
    }
    if (Cg != 0) {
 fileout << 'C' << ' ' << Cg << endl;
    }
    if (Dg != 0) {
 fileout << 'D' << ' ' << Dg << endl;
    }
    if (Mg != 0) {
 fileout << 'M' << ' ' << Mg << endl;
    }
    fileout.close ();

    return (0);
}








