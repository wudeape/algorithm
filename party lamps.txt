Party Lamps

派对灯

IOI98

译 by Leontea

在IOI98的节日宴会上，我们有N(10<=N<=100)盏彩色灯，他们分别从1到N被标上号码。
这些灯都连接到四个按钮：

按钮1：当按下此按钮，将改变所有的灯：本来亮着的灯就熄灭，本来是关着的灯被点亮。 
按钮2：当按下此按钮，将改变所有奇数号的灯。 
按钮3：当按下此按钮，将改变所有偶数号的灯。 
按钮4：当按下此按钮，将改变所有序号是3*K+1(K>=0)的灯。例如：1,4,7... 
一个计数器C记录按钮被按下的次数。
当宴会开始，所有的灯都亮着，此时计数器C为0。
你将得到计数器C(0<=C<=10000)上的数值和经过若干操作后所有灯的状态。写一个程序去找出所有灯最后可能的与所给出信息相符的状态，并且没有重复。

PROGRAM NAME: lamps
INPUT FORMAT
不会有灯会在输入中出现两次。
第一行: N。 
第二行: C最后显示的数值。  
第三行:   最后亮着的灯,用一个空格分开，以-1为结束。  
第四行:   最后关着的灯,用一个空格分开，以-1为结束。 

SAMPLE INPUT (file lamps.in)

10
1
-1
7 -1

在这个样例中，有10盏灯，只有1个按钮被按下。最后7号灯是关着的。

OUTPUT FORMAT

每一行是所有灯可能的最后状态(没有重复)。每一行有N个字符，第1个字符表示1号灯，最后一个字符表示N号灯。0表示关闭，1表示亮着。这些行必须从小到大排列（看作是二进制数）。
如果没有可能的状态，则输出一行'IMPOSSIBLE'。

SAMPLE OUTPUT (file lamps.out)

0000000000
0101010101
0110110110

在这个样例中，有三种可能的状态：

所有灯都关着 
1,4,7,10号灯关着，2,3,5,6,8,9亮着。 
1,3,5,7,9号灯关着，2, 4, 6, 8, 10亮着





#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

#define MAXLAMP 6
#define LAMPMASK ((1<<MAXLAMP)-1)

int nlamp;
int nswitch;
int ison;
int known;

int poss[1<<MAXLAMP];

int flip[4] = {
    LAMPMASK,  /* flip all lights */
    LAMPMASK & 0xAA,  /* flip odd lights */
    LAMPMASK & 0x55, /* flip even lights */
    LAMPMASK & ((1<<(MAXLAMP-1))|(1<<(MAXLAMP-4))) /* lights 1, 4 */
};

/*
 * Starting with current light state ``lights'', flip exactly n switches
 * with number >= i.
 */
void
search(int lights, int i, int n)
{
    if(n == 0) {
 if((lights & known) == ison)
     poss[lights] = 1;
 return;
    }

    for(; i<4; i++)
 search(lights ^ flip[i], i+1, n-1);
}

void
printseq(FILE *fout, int lights)
{
    int i;
    char s[100+1];

    for(i=0; i<nlamp; i++)
 s[i] = (lights & (1<<(MAXLAMP-1 - i%MAXLAMP))) ? '1' : '0';
    s[nlamp] = '\0';
    fprintf(fout, "%s\n", s);
}

void
main(void)
{
    FILE *fin, *fout;
    int a, i, impossible;

    fin = fopen("lamps.in", "r");
    fout = fopen("lamps.out", "w");
    assert(fin != NULL && fout != NULL);

    fscanf(fin, "%d %d", &nlamp, &nswitch);

    for(;;) {
 fscanf(fin, "%d", &a);
 if(a == -1)
     break;
 a = MAXLAMP-1 - (a-1) % MAXLAMP;
 ison |= 1<<a;
 known |= 1<<a;
    }

    for(;;) {
 fscanf(fin, "%d", &a);
 if(a == -1)
     break;
 a = MAXLAMP-1 - (a-1) % MAXLAMP;
 assert((ison & (1<<a)) == 0);
 known |= 1<<a;
    }

    if(nswitch > 4)
 if(nswitch%2 == 0)
     nswitch = 4;
 else
     nswitch = 3;

    for(; nswitch >= 0; nswitch -= 2)
     search(LAMPMASK, 0, nswitch);

    impossible = 1;
    for(i=0; i<(1<<MAXLAMP); i++) {
 if(poss[i]) {
     printseq(fout, i);
     impossible = 0;
 }
    }
    if(impossible)
 fprintf(fout, "IMPOSSIBLE\n");

    exit(0);
}
